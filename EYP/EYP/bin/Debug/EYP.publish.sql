/*
Deployment script for EYP

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "EYP"
:setvar DefaultFilePrefix "EYP"
:setvar DefaultDataPath "c:\Program Files\Microsoft SQL Server\MSSQL11.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "c:\Program Files\Microsoft SQL Server\MSSQL11.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
        
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key 4ce262d2-418f-464a-ba07-36dcee00d749 is skipped, element [dbo].[ActionItem].[ActionItem] (SqlSimpleColumn) will not be renamed to ActionItemDesc';


GO
PRINT N'Rename refactoring operation with key afcd7719-da52-4292-8b91-070926a986a6 is skipped, element [dbo].[Issue].[Issue] (SqlSimpleColumn) will not be renamed to IssueDesc';


GO
PRINT N'Rename refactoring operation with key 576bfbe7-c0f0-49bb-b130-7eeb2969d262 is skipped, element [dbo].[Issue].[Owner] (SqlSimpleColumn) will not be renamed to OwnerId';


GO
PRINT N'Creating [dbo].[Employee]...';


GO
CREATE TABLE [dbo].[Employee] (
    [Id]        VARCHAR (50)  NOT NULL,
    [Name]      VARCHAR (100) NOT NULL,
    [Project]   VARCHAR (100) NOT NULL,
    [ManagerId] VARCHAR (50)  NULL,
    [Email]     VARCHAR (100) NOT NULL,
    [IsManager] BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[EmployeeDNA]...';


GO
CREATE TABLE [dbo].[EmployeeDNA] (
    [EmpId]       VARCHAR (50)  NOT NULL,
    [Area]        VARCHAR (50)  NOT NULL,
    [Rating]      VARCHAR (100) NOT NULL,
    [CreatedDate] DATETIME      NOT NULL
);


GO
PRINT N'Creating [dbo].[FeedbackQuesAns]...';


GO
CREATE TABLE [dbo].[FeedbackQuesAns] (
    [Id]          INT           IDENTITY (1, 1) NOT NULL,
    [EmpId]       VARCHAR (50)  NOT NULL,
    [ManagerId]   VARCHAR (50)  NOT NULL,
    [QuestionId]  INT           NOT NULL,
    [Answer]      VARCHAR (MAX) NULL,
    [RatingScale] INT           NULL,
    [CreatedDate] DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[FeedbackQuesAnsHistory]...';


GO
CREATE TABLE [dbo].[FeedbackQuesAnsHistory] (
    [Id]          INT           NOT NULL,
    [EmpId]       VARCHAR (50)  NOT NULL,
    [ManagerId]   VARCHAR (50)  NOT NULL,
    [QuestionId]  INT           NOT NULL,
    [Answer]      VARCHAR (MAX) NULL,
    [RatingScale] INT           NULL,
    [CreatedDate] DATETIME      NULL
);


GO
PRINT N'Creating [dbo].[Issue]...';


GO
CREATE TABLE [dbo].[Issue] (
    [Id]          INT           IDENTITY (1, 1) NOT NULL,
    [EmpId]       VARCHAR (50)  NOT NULL,
    [ManagerId]   VARCHAR (50)  NOT NULL,
    [IssueDesc]   VARCHAR (MAX) NOT NULL,
    [ActionItem]  VARCHAR (100) NULL,
    [OwnerId]     VARCHAR (50)  NULL,
    [DueDate]     DATETIME      NULL,
    [Status]      VARCHAR (20)  NULL,
    [CreatedDate] DATETIME      NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[IssueHistory]...';


GO
CREATE TABLE [dbo].[IssueHistory] (
    [Id]          INT           NOT NULL,
    [EmpId]       VARCHAR (50)  NOT NULL,
    [ManagerId]   VARCHAR (50)  NOT NULL,
    [IssueDesc]   VARCHAR (MAX) NOT NULL,
    [ActionItem]  VARCHAR (100) NULL,
    [OwnerId]     VARCHAR (50)  NULL,
    [DueDate]     DATETIME      NULL,
    [Status]      VARCHAR (20)  NULL,
    [CreatedDate] DATETIME      NOT NULL
);


GO
PRINT N'Creating [dbo].[Question]...';


GO
CREATE TABLE [dbo].[Question] (
    [Id]                  INT           IDENTITY (1, 1) NOT NULL,
    [Name]                VARCHAR (500) NOT NULL,
    [Type]                INT           NOT NULL,
    [DefaultAnswerValues] VARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[QuestionType]...';


GO
CREATE TABLE [dbo].[QuestionType] (
    [Id]   INT           IDENTITY (1, 1) NOT NULL,
    [Name] VARCHAR (100) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[TrainingPlan]...';


GO
CREATE TABLE [dbo].[TrainingPlan] (
    [Id]              INT           IDENTITY (1, 1) NOT NULL,
    [EmpId]           VARCHAR (50)  NOT NULL,
    [ManagerId]       VARCHAR (50)  NOT NULL,
    [TrainingArea]    VARCHAR (100) NOT NULL,
    [TrainingProgram] VARCHAR (100) NOT NULL,
    [Remarks]         VARCHAR (MAX) NULL,
    [Timeframe]       VARCHAR (50)  NULL,
    [ClosedMonth]     VARCHAR (50)  NULL,
    [Status]          VARCHAR (20)  NULL,
    [CreatedDate]     DATETIME      NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[TrainingPlanHistory]...';


GO
CREATE TABLE [dbo].[TrainingPlanHistory] (
    [Id]              INT           NOT NULL,
    [EmpId]           VARCHAR (50)  NOT NULL,
    [ManagerId]       VARCHAR (50)  NOT NULL,
    [TrainingArea]    VARCHAR (100) NOT NULL,
    [TrainingProgram] VARCHAR (100) NOT NULL,
    [Remarks]         VARCHAR (MAX) NULL,
    [Timeframe]       VARCHAR (50)  NULL,
    [ClosedMonth]     VARCHAR (50)  NULL,
    [Status]          VARCHAR (20)  NULL,
    [CreatedDate]     DATETIME      NOT NULL
);


GO
PRINT N'Creating [dbo].[EmployeeDNAType]...';


GO
CREATE TYPE [dbo].[EmployeeDNAType] AS TABLE (
    [EmpId]  VARCHAR (50)  NOT NULL,
    [Area]   VARCHAR (50)  NOT NULL,
    [Rating] VARCHAR (100) NOT NULL);


GO
PRINT N'Creating [dbo].[EmployeeType]...';


GO
CREATE TYPE [dbo].[EmployeeType] AS TABLE (
    [Id]        VARCHAR (50)  NOT NULL,
    [Name]      VARCHAR (100) NOT NULL,
    [Project]   VARCHAR (100) NOT NULL,
    [ManagerId] VARCHAR (50)  NULL,
    [Email]     VARCHAR (100) NOT NULL,
    [IsManager] BIT           NOT NULL);


GO
PRINT N'Creating [dbo].[FeedbackQuesAnsType]...';


GO
CREATE TYPE [dbo].[FeedbackQuesAnsType] AS TABLE (
    [QuestionId]  INT           NOT NULL,
    [Answer]      VARCHAR (MAX) NULL,
    [RatingScale] INT           NULL);


GO
PRINT N'Creating [dbo].[IssueType]...';


GO
CREATE TYPE [dbo].[IssueType] AS TABLE (
    [Id]         INT           NULL,
    [IssueDesc]  VARCHAR (MAX) NOT NULL,
    [ActionItem] VARCHAR (100) NULL,
    [OwnerId]    VARCHAR (50)  NULL,
    [DueDate]    DATETIME      NULL,
    [Status]     VARCHAR (20)  NULL);


GO
PRINT N'Creating [dbo].[TrainingPlanType]...';


GO
CREATE TYPE [dbo].[TrainingPlanType] AS TABLE (
    [Id]              INT           NULL,
    [TrainingArea]    VARCHAR (100) NOT NULL,
    [TrainingProgram] VARCHAR (100) NOT NULL,
    [Remarks]         VARCHAR (MAX) NULL,
    [Timeframe]       VARCHAR (50)  NULL,
    [ClosedMonth]     VARCHAR (50)  NULL,
    [Status]          VARCHAR (20)  NULL);


GO
PRINT N'Creating FK_Employee_Employee...';


GO
ALTER TABLE [dbo].[Employee] WITH NOCHECK
    ADD CONSTRAINT [FK_Employee_Employee] FOREIGN KEY ([ManagerId]) REFERENCES [dbo].[Employee] ([Id]);


GO
PRINT N'Creating FK_FeedbackQuesAns_Employee...';


GO
ALTER TABLE [dbo].[FeedbackQuesAns] WITH NOCHECK
    ADD CONSTRAINT [FK_FeedbackQuesAns_Employee] FOREIGN KEY ([EmpId]) REFERENCES [dbo].[Employee] ([Id]);


GO
PRINT N'Creating FK_FeedbackQuesAns_EmployeeManager...';


GO
ALTER TABLE [dbo].[FeedbackQuesAns] WITH NOCHECK
    ADD CONSTRAINT [FK_FeedbackQuesAns_EmployeeManager] FOREIGN KEY ([ManagerId]) REFERENCES [dbo].[Employee] ([Id]);


GO
PRINT N'Creating FK_FeedbackQuesAns_Question...';


GO
ALTER TABLE [dbo].[FeedbackQuesAns] WITH NOCHECK
    ADD CONSTRAINT [FK_FeedbackQuesAns_Question] FOREIGN KEY ([QuestionId]) REFERENCES [dbo].[Question] ([Id]);


GO
PRINT N'Creating FK_FeedbackQuesAnsHistory_FeedbackQuesAns...';


GO
ALTER TABLE [dbo].[FeedbackQuesAnsHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_FeedbackQuesAnsHistory_FeedbackQuesAns] FOREIGN KEY ([Id]) REFERENCES [dbo].[FeedbackQuesAns] ([Id]);


GO
PRINT N'Creating FK_FeedbackQuesAnsHistory_Employee...';


GO
ALTER TABLE [dbo].[FeedbackQuesAnsHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_FeedbackQuesAnsHistory_Employee] FOREIGN KEY ([EmpId]) REFERENCES [dbo].[Employee] ([Id]);


GO
PRINT N'Creating FK_FeedbackQuesAnsHistory_EmployeeManager...';


GO
ALTER TABLE [dbo].[FeedbackQuesAnsHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_FeedbackQuesAnsHistory_EmployeeManager] FOREIGN KEY ([ManagerId]) REFERENCES [dbo].[Employee] ([Id]);


GO
PRINT N'Creating FK_FeedbackQuesAnsHistory_Question...';


GO
ALTER TABLE [dbo].[FeedbackQuesAnsHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_FeedbackQuesAnsHistory_Question] FOREIGN KEY ([QuestionId]) REFERENCES [dbo].[Question] ([Id]);


GO
PRINT N'Creating FK_Issue_Employee...';


GO
ALTER TABLE [dbo].[Issue] WITH NOCHECK
    ADD CONSTRAINT [FK_Issue_Employee] FOREIGN KEY ([EmpId]) REFERENCES [dbo].[Employee] ([Id]);


GO
PRINT N'Creating FK_Issue_EmployeeManager...';


GO
ALTER TABLE [dbo].[Issue] WITH NOCHECK
    ADD CONSTRAINT [FK_Issue_EmployeeManager] FOREIGN KEY ([ManagerId]) REFERENCES [dbo].[Employee] ([Id]);


GO
PRINT N'Creating FK_Issue_Owner...';


GO
ALTER TABLE [dbo].[Issue] WITH NOCHECK
    ADD CONSTRAINT [FK_Issue_Owner] FOREIGN KEY ([OwnerId]) REFERENCES [dbo].[Employee] ([Id]);


GO
PRINT N'Creating FK_IssueHistory_Issue...';


GO
ALTER TABLE [dbo].[IssueHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_IssueHistory_Issue] FOREIGN KEY ([Id]) REFERENCES [dbo].[Issue] ([Id]);


GO
PRINT N'Creating FK_IssueHistory_Employee...';


GO
ALTER TABLE [dbo].[IssueHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_IssueHistory_Employee] FOREIGN KEY ([EmpId]) REFERENCES [dbo].[Employee] ([Id]);


GO
PRINT N'Creating FK_IssueHistory_EmployeeManager...';


GO
ALTER TABLE [dbo].[IssueHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_IssueHistory_EmployeeManager] FOREIGN KEY ([ManagerId]) REFERENCES [dbo].[Employee] ([Id]);


GO
PRINT N'Creating FK_IssueHistory_Owner...';


GO
ALTER TABLE [dbo].[IssueHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_IssueHistory_Owner] FOREIGN KEY ([OwnerId]) REFERENCES [dbo].[Employee] ([Id]);


GO
PRINT N'Creating FK_Question_QuestionType...';


GO
ALTER TABLE [dbo].[Question] WITH NOCHECK
    ADD CONSTRAINT [FK_Question_QuestionType] FOREIGN KEY ([Type]) REFERENCES [dbo].[QuestionType] ([Id]);


GO
PRINT N'Creating FK_TrainingPlan_Employee...';


GO
ALTER TABLE [dbo].[TrainingPlan] WITH NOCHECK
    ADD CONSTRAINT [FK_TrainingPlan_Employee] FOREIGN KEY ([EmpId]) REFERENCES [dbo].[Employee] ([Id]);


GO
PRINT N'Creating FK_TrainingPlan_EmployeeManager...';


GO
ALTER TABLE [dbo].[TrainingPlan] WITH NOCHECK
    ADD CONSTRAINT [FK_TrainingPlan_EmployeeManager] FOREIGN KEY ([ManagerId]) REFERENCES [dbo].[Employee] ([Id]);


GO
PRINT N'Creating FK_TrainingPlanHistory_TrainingPlan...';


GO
ALTER TABLE [dbo].[TrainingPlanHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_TrainingPlanHistory_TrainingPlan] FOREIGN KEY ([Id]) REFERENCES [dbo].[TrainingPlan] ([Id]);


GO
PRINT N'Creating FK_TrainingPlanHistory_Employee...';


GO
ALTER TABLE [dbo].[TrainingPlanHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_TrainingPlanHistory_Employee] FOREIGN KEY ([EmpId]) REFERENCES [dbo].[Employee] ([Id]);


GO
PRINT N'Creating FK_TrainingPlanHistory_EmployeeManager...';


GO
ALTER TABLE [dbo].[TrainingPlanHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_TrainingPlanHistory_EmployeeManager] FOREIGN KEY ([ManagerId]) REFERENCES [dbo].[Employee] ([Id]);


GO
PRINT N'Creating [dbo].[FeedbackQuesAns_UpdateTrigger]...';


GO
CREATE TRIGGER [FeedbackQuesAns_UpdateTrigger]
	ON [dbo].[FeedbackQuesAns]
	FOR UPDATE, INSERT
	AS
	BEGIN
		INSERT INTO FeedbackQuesAnsHistory SELECT * FROM inserted
	END
GO
PRINT N'Creating [dbo].[Issue_UpdateTrigger]...';


GO
CREATE TRIGGER [Issue_UpdateTrigger]
	ON [dbo].[Issue]
	FOR UPDATE, INSERT
	AS
	BEGIN
		INSERT INTO IssueHistory SELECT * FROM inserted
	END
GO
PRINT N'Creating [dbo].[TrainingPlan_UpdateTrigger]...';


GO
CREATE TRIGGER [TrainingPlan_UpdateTrigger]
	ON [dbo].[TrainingPlan]
	FOR UPDATE, INSERT
	AS
	BEGIN
		INSERT INTO TrainingPlanHistory SELECT * FROM inserted
	END
GO
PRINT N'Creating [dbo].[GetEmployeeByEmpId]...';


GO
CREATE PROCEDURE [dbo].[GetEmployeeByEmpId]
	@EmpId VARCHAR(50)
AS
BEGIN
	SELECT e.Id,
		e.Name,
		e.Project,
		e.ManagerId,
		m.Name AS ManagerName,
		e.Email,
		e.IsManager
	FROM Employee e
	LEFT JOIN Employee m
	ON e.ManagerId = m.Id
	WHERE e.Id = @EmpId
END
GO
PRINT N'Creating [dbo].[GetEmployeeFeedbackByEmpId]...';


GO
CREATE PROCEDURE [dbo].[GetEmployeeFeedbackByEmpId]
	@EmpId VARCHAR(50)
	--@managerId INT
AS
BEGIN
	SELECT f.[Id]
      ,f.[EmpId]
	  ,e.Name AS EmployeeName
      ,f.[ManagerId]
	  ,m.Name AS ManagerName
      ,f.[QuestionId]
	  ,q.Name AS Question
	  ,qt.Name AS QuestionType
      ,[Answer]
      ,[RatingScale]
	  ,f.[CreatedDate]
  FROM [FeedbackQuesAns] f
  INNER JOIN Employee e
  on f.EmpId = e.Id
  AND e.Id = @EmpId
  LEFT JOIN Employee m
  on f.ManagerId = m.Id
  AND m.Id = @EmpId
  --AND f.ManagerId = @managerId
  INNER JOIN Question q
  on f.QuestionId = q.Id
  INNER JOIN QuestionType qt
  on q.Type = qt.Id

  --SELECT a.[Id]
  --    ,[EmpId]
  --    ,a.[ManagerId]
  --    ,[ActionItemDesc]
  --    ,[Owner]
  --    ,[DueDate]
  --    ,[Status]
	 -- ,[Remarks]
  --FROM [ActionItem] a
  --INNER JOIN Employee e
  --on a.EmpId = e.Id
  --AND e.Id = @EmpId
  --LEFT JOIN Employee m
  --on a.ManagerId = m.ManagerId
  --AND a.ManagerId = @managerId

  SELECT i.[Id]
      ,[EmpId]
	  ,e.Name AS EmployeeName
      ,i.[ManagerId]
	  ,m.Name AS ManagerName
      ,[IssueDesc]
      ,[ActionItem]
      ,[OwnerId]
	  ,o.Name AS OwnerName
      ,[DueDate]
      ,[Status]
	  ,i.CreatedDate
  FROM [Issue] i
  INNER JOIN Employee e
  on i.EmpId = e.Id
  AND e.Id = @EmpId
  LEFT JOIN Employee o
  on i.OwnerId = o.Id
  AND o.Id = @EmpId
  LEFT JOIN Employee m
  on i.ManagerId = m.ManagerId
  AND m.Id = @EmpId
  --AND i.ManagerId = @managerId

  SELECT t.[Id]
      ,[EmpId]
	  ,e.Name AS EmployeeName
      ,t.[ManagerId]
	  ,m.Name AS ManagerName
      ,[TrainingArea]
      ,[TrainingProgram]
      ,[Remarks]
      ,[Timeframe]
      ,[ClosedMonth]
      ,[Status]
	  ,t.CreatedDate
  FROM [TrainingPlan] t
  INNER JOIN Employee e
  on t.EmpId = e.Id
  AND e.Id = @EmpId
  LEFT JOIN Employee m
  on t.ManagerId = m.ManagerId
  AND m.Id = @EmpId
  --AND t.ManagerId = @managerId

  SELECT EmpId, 
		Area, 
		Rating 
  FROM EmployeeDNA
  WHERE EmpId = @empId
  --AND CreatedDate = (SELECT MAX(CreatedDate) FROM EmployeeDNA WHERE EmpId = @empId)

  SELECT e.Id,
		e.Name,
		e.Project,
		e.ManagerId,
		m.Name AS ManagerName,
		e.Email,
		e.IsManager
	FROM Employee e
	LEFT JOIN Employee m
	ON e.ManagerId = m.Id
	WHERE e.Id = @EmpId
END
GO
PRINT N'Creating [dbo].[GetEmployeesByProject]...';


GO
CREATE PROCEDURE [dbo].[GetEmployeesByProject]
	@projectName VARCHAR(100)
AS
BEGIN
	SELECT Id, Name, Email FROM Employee 
	WHERE Project = @projectName
END
GO
PRINT N'Creating [dbo].[GetFeedbackQuesAnsHistory]...';


GO
CREATE PROCEDURE [dbo].[GetFeedbackQuesAnsHistory]
	@empId VARCHAR(50),
	@questionId int
AS
BEGIN
	SELECT [Id]
      ,[EmpId]
      ,[ManagerId]
      ,[QuestionId]
      ,[Answer]
      ,[RatingScale]
      ,[CreatedDate]
	FROM FeedbackQuesAnsHistory
	WHERE QuestionId = @questionId
	AND EmpId = @empId
	ORDER BY CreatedDate DESC
END
GO
PRINT N'Creating [dbo].[GetIssueHistory]...';


GO
CREATE PROCEDURE [dbo].[GetIssueHistory]
	@IssueId INT
AS
BEGIN
	SELECT i.[Id]
      ,[EmpId]
      ,i.[ManagerId]
      ,[IssueDesc]
      ,[ActionItem]
      ,e.[Name] AS OwnerName
      ,[DueDate]
      ,[Status]
      ,[CreatedDate]
  FROM [IssueHistory] i
  INNER JOIN Employee e
  ON i.OwnerId = e.Id
  WHERE i.Id = @IssueId
  ORDER BY CreatedDate DESC
END
GO
PRINT N'Creating [dbo].[GetQuestionsByQuestionType]...';


GO
CREATE PROCEDURE [dbo].[GetQuestionsByQuestionType]
	@QuestionType VARCHAR(100)
AS
BEGIN
	SELECT
		q.Id, 
		q.Name AS Question, 
		qt.Name AS QuestionType,
		q.DefaultAnswerValues
	FROM Question q
	INNER JOIN QuestionType qt
	ON q.Type = qt.Id
	AND qt.Name = @QuestionType
END
GO
PRINT N'Creating [dbo].[GetSubordinateListByManagerId]...';


GO
CREATE PROCEDURE [dbo].[GetSubordinateListByManagerId]
	@ManagerId VARCHAR(50)
AS
BEGIN
	SELECT [Id]
      ,[Name]
      ,[Project]
      ,[ManagerId]
	  ,[Email]
	FROM [Employee]
	WHERE ManagerId = @ManagerId
END
GO
PRINT N'Creating [dbo].[GetTrainingPlanHistory]...';


GO
CREATE PROCEDURE [dbo].[GetTrainingPlanHistory]
	@TrainingPlanId INT
AS
BEGIN
	SELECT [Id]
      ,[EmpId]
      ,[ManagerId]
      ,[TrainingArea]
      ,[TrainingProgram]
      ,[Remarks]
      ,[Timeframe]
      ,[ClosedMonth]
      ,[Status]
      ,[CreatedDate]
  FROM [TrainingPlanHistory]
  WHERE Id = @TrainingPlanId
  ORDER BY CreatedDate DESC
END
GO
PRINT N'Creating [dbo].[InsertEmployee]...';


GO
CREATE PROCEDURE [dbo].[InsertEmployee]
	@EmpId VARCHAR(50),
	@Name VARCHAR(100),
	@ProjectName VARCHAR(100),
	@ManagerId VARCHAR(50),
	@Email VARCHAR(100), 
	@IsManager bit
AS
BEGIN
	IF EXISTS(SELECT Id FROM Employee WHERE Id = @EmpId)
	BEGIN
		UPDATE Employee SET Project = @ProjectName, ManagerId = @ManagerId, Email= @Email, IsManager = @IsManager
		WHERE Id = @EmpId
	END
	ELSE
	BEGIN
		INSERT INTO Employee (ID, Name, Project, ManagerId, Email, IsManager) VALUES (@EmpId, @Name, @ProjectName, @ManagerId, @Email, @IsManager)
	END
END
GO
PRINT N'Creating [dbo].[InsertEmployeeDNA]...';


GO
CREATE PROCEDURE [dbo].[InsertEmployeeDNA]
	@employeeDNAData EmployeeDNAType READONLY
AS
BEGIN
	DELETE FROM EmployeeDNA WHERE EmpId IN (SELECT EmpId FROM @employeeDNAData)
	INSERT INTO EmployeeDNA (EmpId, Area, Rating, CreatedDate) SELECT EmpId, Area, Rating, GETDATE() FROM @employeeDNAData
END
GO
PRINT N'Creating [dbo].[InsertEmployeeFeeback]...';


GO
CREATE PROCEDURE [dbo].[InsertEmployeeFeeback]
	@EmpId VARCHAR(50),
	@ManagerId VARCHAR(50),
	@FeedbackQuesAns FeedbackQuesAnsType READONLY,
	--@ActionItem ActionItemType READONLY,
	@Issue IssueType READONLY,
	@TrainingPlan TrainingPlanType READONLY
AS
BEGIN
	DECLARE @CreatedDate DATETIME = GETDATE()

	UPDATE T SET T.Timeframe = D.Timeframe, T.Status = D.Status, T.Remarks = D.Remarks, T.CreatedDate = @CreatedDate, T.ClosedMonth = D.ClosedMonth
	FROM TrainingPlan T
	INNER JOIN @TrainingPlan D
	ON T.Id = D.Id

	INSERT INTO TrainingPlan (EmpId, ManagerId, TrainingArea, TrainingProgram, Remarks, Timeframe, ClosedMonth, Status, CreatedDate)
		(SELECT @EmpId, @ManagerId, TrainingArea, TrainingProgram, Remarks, Timeframe, ClosedMonth, Status, @CreatedDate FROM @TrainingPlan WHERE Id NOT IN (SELECT Id FROM TrainingPlan WHERE EmpId = @EmpId))

	UPDATE F SET F.Answer = D.Answer, F.RatingScale = D.RatingScale, F.CreatedDate = @CreatedDate
	FROM FeedbackQuesAns F
	INNER JOIN @FeedbackQuesAns D
	ON F.QuestionId = D.QuestionId
	AND F.EmpId = @EmpId

	INSERT INTO FeedbackQuesAns (EmpId, ManagerId, QuestionId, Answer, RatingScale, CreatedDate)
		(SELECT @EmpId, @ManagerId, QuestionId, Answer, RatingScale, @CreatedDate FROM @FeedbackQuesAns WHERE QuestionId NOT IN (SELECT QuestionId FROM FeedbackQuesAns WHERE EmpId = @EmpId))

	--INSERT INTO ActionItem (EmpId,ManagerId, ActionItemDesc, Owner, DueDate, Status, Remarks)
	--	(SELECT @EmpId, @ManagerId, ActionItemDesc, Owner, DueDate, Status, Remarks FROM @ActionItem)

	UPDATE I SET I.Status = D.Status, I.DueDate = D.DueDate, I.CreatedDate = @CreatedDate, I.OwnerId = D.OwnerId
	FROM Issue I
	INNER JOIN @Issue D
	ON I.Id = D.Id

	INSERT INTO Issue (EmpId, ManagerId, IssueDesc, ActionItem, OwnerId, DueDate, Status, CreatedDate)
		(SELECT @EmpId, @ManagerId, IssueDesc, ActionItem, OwnerId, DueDate, Status, @CreatedDate FROM @Issue WHERE Id NOT IN (SELECT Id FROM Issue WHERE EmpId = @EmpId))
END
GO
PRINT N'Creating [dbo].[InsertEmployeesData]...';


GO
CREATE PROCEDURE [dbo].[InsertEmployeesData]
	@employeeData EmployeeType READONLY
AS
BEGIN
	INSERT INTO Employee (Id, Name, Project, ManagerId, Email, IsManager) 
	(SELECT Id, Name, Project, ManagerId, Email, IsManager FROM @employeeData WHERE Id NOT IN (SELECT Id FROM Employee));

	UPDATE E SET E.Name = d.Name, E.Project = d.Project, e.ManagerId = d.ManagerId, e.Email = d.Email, e.IsManager = d.IsManager
	FROM Employee E
	INNER JOIN @employeeData d
	ON E.Id = d.Id
END
GO
PRINT N'Creating [dbo].[InsertQuestion]...';


GO
CREATE PROCEDURE [dbo].[InsertQuestion]
	@Question VARCHAR(2000),
	@QuestionType VARCHAR(100),
	@DefaultAnswerValues VARCHAR(MAX)
AS
BEGIN
	DECLARE @questionTypeId INT = (SELECT Id FROM QuestionType WHERE Name = @QuestionType)
	INSERT INTO Question (Name, Type, DefaultAnswerValues) VALUES (@Question, @questionTypeId, @DefaultAnswerValues)
END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4ce262d2-418f-464a-ba07-36dcee00d749')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4ce262d2-418f-464a-ba07-36dcee00d749')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'afcd7719-da52-4292-8b91-070926a986a6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('afcd7719-da52-4292-8b91-070926a986a6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '576bfbe7-c0f0-49bb-b130-7eeb2969d262')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('576bfbe7-c0f0-49bb-b130-7eeb2969d262')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
IF NOT EXISTS(SELECT 1 FROM QuestionType WHERE Name ='PerformanceFeedback')
BEGIN
	INSERT INTO QuestionType(Name) VALUES('PerformanceFeedback')
END
IF NOT EXISTS(SELECT 1 FROM QuestionType WHERE Name ='GrowthPlan')
BEGIN
	INSERT INTO QuestionType(Name) VALUES('GrowthPlan')
END
IF NOT EXISTS(SELECT 1 FROM QuestionType WHERE Name ='StabilityAnalysis')
BEGIN
	INSERT INTO QuestionType(Name) VALUES('StabilityAnalysis')
END

DECLARE @performanceFeedback INT = (SELECT Id FROM QuestionType WHERE Name='PerformanceFeedback')
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='How have you found the past year/quarter and what are the reasons for this?')
BEGIN
	INSERT INTO Question (Name, Type) VALUES('How have you found the past year/quarter and what are the reasons for this?', @performanceFeedback)
END
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='What do you consider to be your main achievement of the past quarter/year?')
BEGIN
INSERT INTO Question (Name, Type) VALUES('What do you consider to be your main achievement of the past quarter/year?', @performanceFeedback)
END
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='What factors of your role do you find most challenging?')
BEGIN
INSERT INTO Question (Name, Type) VALUES('What factors of your role do you find most challenging?', @performanceFeedback)
END
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='What factors of your role interest you the most?')
BEGIN
INSERT INTO Question (Name, Type) VALUES('What factors of your role interest you the most?', @performanceFeedback)
END
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='What do you consider to be your most important aims and tasks in the next quarter/year?')
BEGIN
INSERT INTO Question (Name, Type) VALUES('What do you consider to be your most important aims and tasks in the next quarter/year?', @performanceFeedback)
END
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='What steps could be taken by you to enable you to be more effective in your current role and how your People Manager can add to that?')
BEGIN
INSERT INTO Question (Name, Type) VALUES('What steps could be taken by you to enable you to be more effective in your current role and how your People Manager can add to that?', @performanceFeedback)
END
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='What kind of work or role would you like to be doing in one/two/five years time? i.e. think about relationships, who you would like to work with, projects that excite you etc.')
BEGIN
INSERT INTO Question (Name, Type) VALUES('What kind of work or role would you like to be doing in one/two/five years time? i.e. think about relationships, who you would like to work with, projects that excite you etc.', @performanceFeedback)
END
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='What sort of training/experiences would benefit you in the next year? Not just job-skills - also your natural strengths and personal passions you’d like to develop - you and your work can benefit from these.')
BEGIN
INSERT INTO Question (Name, Type) VALUES('What sort of training/experiences would benefit you in the next year? Not just job-skills - also your natural strengths and personal passions you’d like to develop - you and your work can benefit from these.', @performanceFeedback)
END
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='Peer Feedback')
BEGIN
INSERT INTO Question (Name, Type) VALUES('Peer Feedback', @performanceFeedback)
END

DECLARE @GrowthPlan INT = (SELECT Id FROM QuestionType WHERE Name='GrowthPlan')
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='Current Role')
BEGIN
INSERT INTO Question (Name, Type, DefaultAnswerValues) VALUES('Current Role', @GrowthPlan, 'Trainee, Associate L1, Associate L2, Sr.Associate L1, Sr. Associate L2, Manager')
END
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='Next Planned Role')
BEGIN
INSERT INTO Question (Name, Type, DefaultAnswerValues) VALUES('Next Planned Role', @GrowthPlan, 'Trainee, Associate L1, Associate L2, Sr.Associate L1, Sr. Associate L2, Manager')
END
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='Timeline')
BEGIN
INSERT INTO Question (Name, Type) VALUES('Timeline', @GrowthPlan)
END
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='Replacement (Flight Risk & Reasons)')
BEGIN
INSERT INTO Question (Name, Type) VALUES('Replacement (Flight Risk & Reasons)', @GrowthPlan)
END
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='Competency Status')
BEGIN
INSERT INTO Question (Name, Type, DefaultAnswerValues) VALUES('Competency Status', @GrowthPlan, 'Not Applied, Applied, Approved, Rejected')
END
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='Current Performance')
BEGIN
INSERT INTO Question (Name, Type, DefaultAnswerValues) VALUES('Current Performance', @GrowthPlan, 'High, Medium, Low')
END
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='Potential')
BEGIN
INSERT INTO Question (Name, Type, DefaultAnswerValues) VALUES('Potential', @GrowthPlan, 'High, Medium, Low')
END

DECLARE @StabilityAnalysis INT = (SELECT Id FROM QuestionType WHERE Name='StabilityAnalysis')
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='Is the person satisfied with last Performance Review?')
BEGIN
INSERT INTO Question (Name, Type, DefaultAnswerValues) VALUES('Is the person satisfied with last Performance Review?', @StabilityAnalysis, '1,2,3,4,5')
END
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='Is the person satisfied with current Compensation?')
BEGIN
INSERT INTO Question (Name, Type, DefaultAnswerValues) VALUES('Is the person satisfied with current Compensation?', @StabilityAnalysis, '1,2,3,4,5')
END
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='Is the person satisified with the current work?')
BEGIN
INSERT INTO Question (Name, Type, DefaultAnswerValues) VALUES('Is the person satisified with the current work?', @StabilityAnalysis, '1,2,3,4,5')
END
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='Is the person satisified with the growth plan?')
BEGIN
INSERT INTO Question (Name, Type, DefaultAnswerValues) VALUES('Is the person satisified with the growth plan?', @StabilityAnalysis, '1,2,3,4,5')
END
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='Is the person satisified with the working environment?')
BEGIN
INSERT INTO Question (Name, Type, DefaultAnswerValues) VALUES('Is the person satisified with the working environment?', @StabilityAnalysis, '1,2,3,4,5')
END
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='Is the person looking for relocation?')
BEGIN
INSERT INTO Question (Name, Type, DefaultAnswerValues) VALUES('Is the person looking for relocation?', @StabilityAnalysis, '1,2,3,4,5')
END
IF NOT EXISTS(SELECT 1 FROM Question WHERE Name ='How is the overall morale?')
BEGIN
INSERT INTO Question (Name, Type, DefaultAnswerValues) VALUES('How is the overall morale?', @StabilityAnalysis, '1,2,3,4,5')
END
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Employee] WITH CHECK CHECK CONSTRAINT [FK_Employee_Employee];

ALTER TABLE [dbo].[FeedbackQuesAns] WITH CHECK CHECK CONSTRAINT [FK_FeedbackQuesAns_Employee];

ALTER TABLE [dbo].[FeedbackQuesAns] WITH CHECK CHECK CONSTRAINT [FK_FeedbackQuesAns_EmployeeManager];

ALTER TABLE [dbo].[FeedbackQuesAns] WITH CHECK CHECK CONSTRAINT [FK_FeedbackQuesAns_Question];

ALTER TABLE [dbo].[FeedbackQuesAnsHistory] WITH CHECK CHECK CONSTRAINT [FK_FeedbackQuesAnsHistory_FeedbackQuesAns];

ALTER TABLE [dbo].[FeedbackQuesAnsHistory] WITH CHECK CHECK CONSTRAINT [FK_FeedbackQuesAnsHistory_Employee];

ALTER TABLE [dbo].[FeedbackQuesAnsHistory] WITH CHECK CHECK CONSTRAINT [FK_FeedbackQuesAnsHistory_EmployeeManager];

ALTER TABLE [dbo].[FeedbackQuesAnsHistory] WITH CHECK CHECK CONSTRAINT [FK_FeedbackQuesAnsHistory_Question];

ALTER TABLE [dbo].[Issue] WITH CHECK CHECK CONSTRAINT [FK_Issue_Employee];

ALTER TABLE [dbo].[Issue] WITH CHECK CHECK CONSTRAINT [FK_Issue_EmployeeManager];

ALTER TABLE [dbo].[Issue] WITH CHECK CHECK CONSTRAINT [FK_Issue_Owner];

ALTER TABLE [dbo].[IssueHistory] WITH CHECK CHECK CONSTRAINT [FK_IssueHistory_Issue];

ALTER TABLE [dbo].[IssueHistory] WITH CHECK CHECK CONSTRAINT [FK_IssueHistory_Employee];

ALTER TABLE [dbo].[IssueHistory] WITH CHECK CHECK CONSTRAINT [FK_IssueHistory_EmployeeManager];

ALTER TABLE [dbo].[IssueHistory] WITH CHECK CHECK CONSTRAINT [FK_IssueHistory_Owner];

ALTER TABLE [dbo].[Question] WITH CHECK CHECK CONSTRAINT [FK_Question_QuestionType];

ALTER TABLE [dbo].[TrainingPlan] WITH CHECK CHECK CONSTRAINT [FK_TrainingPlan_Employee];

ALTER TABLE [dbo].[TrainingPlan] WITH CHECK CHECK CONSTRAINT [FK_TrainingPlan_EmployeeManager];

ALTER TABLE [dbo].[TrainingPlanHistory] WITH CHECK CHECK CONSTRAINT [FK_TrainingPlanHistory_TrainingPlan];

ALTER TABLE [dbo].[TrainingPlanHistory] WITH CHECK CHECK CONSTRAINT [FK_TrainingPlanHistory_Employee];

ALTER TABLE [dbo].[TrainingPlanHistory] WITH CHECK CHECK CONSTRAINT [FK_TrainingPlanHistory_EmployeeManager];


GO
PRINT N'Update complete.'
GO
